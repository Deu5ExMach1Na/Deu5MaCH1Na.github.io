<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>尺取法</title>
    <link href="/2021/11/14/%E5%B0%BA%E5%8F%96%E6%B3%95/"/>
    <url>/2021/11/14/%E5%B0%BA%E5%8F%96%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><p>尺取法是一种比较基础的算法,一般用来解决具有单调性的区间问题.</p><p>维护两个指针l,r. 每次确定区间的左端点,让r不断向右移动,直到满足条件停下.</p><p>大多需要证明区间的单调性,即l++时 r不会像左移动,此时l,r是最优或者需要将r++达到最优.</p><p>时间复杂度均摊为 <em><strong>O(n)</strong></em>.</p><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><h3 id="1-Subsequence"><a href="#1-Subsequence" class="headerlink" title="1.Subsequence :"></a>1.<a href="http://poj.org/problem?id=3061">Subsequence</a> :</h3><p>注意到若l++时,若此时[l,r]上的和题目满足条件,则一定是最优的,无需将r–,若此时不满足条件则将r++</p><p>原因：当[l,r]的区间和小于S时,[l,r-1]就不可能大于或者等于S,因为a[r]是个正数.[l+1,r-1]就更不可能,所以当l向右移动的时候,r不可能向左移动.</p><p>Code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>，r=<span class="hljs-number">0</span>，now=<span class="hljs-number">0</span>;l&lt;=n;)&#123;<br>  <span class="hljs-keyword">while</span> (now&lt;S&amp;&amp;r&lt;n) now+=a[++r]; <span class="hljs-comment">//表示先把r+1，再执行now+=a[r].注意要使r&lt;=n.</span><br>  <span class="hljs-comment">/*当now&lt;S的时候，我们不断地向右延伸区间，直到now&gt;=S*/</span><br>  <span class="hljs-keyword">if</span> (now&lt;S) <span class="hljs-keyword">break</span>;<br>  <span class="hljs-comment">/*这时候l已经过大了，r到n也满足不了条件，这时要退出循环，否则下面的ans会被错误更新.*/</span><br>  ans=<span class="hljs-built_in">min</span>(ans，r-l+<span class="hljs-number">1</span>); <span class="hljs-comment">// [l，r]区间的长度</span><br>  now-=a[l++]; <span class="hljs-comment">// 这里就是先执行now-=a[l]，然后再执行l+=1.</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-逛画展"><a href="#2-逛画展" class="headerlink" title="2.逛画展"></a>2.<a href="https://www.luogu.com.cn/problem/P1638">逛画展</a></h3><p>同理,若l++,此时无需将r–</p><p>因为若此时[l,r-n]满足有了所有画师的画,则在之前：[l-1,r-n]时,一定也满足,所以矛盾.</p><p>Code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>，r=<span class="hljs-number">0</span>，now=<span class="hljs-number">0</span>;l&lt;=n;)&#123;<br>  <span class="hljs-keyword">while</span> (now&lt;m&amp;&amp;r&lt;n)&#123;<br>    r++;<br>    <span class="hljs-keyword">if</span> (!cnt[a[r]]) now++; <span class="hljs-comment">// 如果a[r]还没有，这个区间就多了一种画.</span><br>    cnt[a[r]]++;<br>  &#125;<span class="hljs-comment">// 大括号内的东西简写为 now+=!cnt[a[++r]]++;</span><br>  <span class="hljs-keyword">if</span> (now&lt;m) <span class="hljs-keyword">break</span>;<br>  ans=<span class="hljs-built_in">min</span>(ans，r-l+<span class="hljs-number">1</span>);<br>  now-=!--cnt[a[l++]];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-A-B-Problem"><a href="#3-A-B-Problem" class="headerlink" title="3.A-B Problem"></a>3.<a href="https://www.luogu.com.cn/problem/P1102">A-B Problem</a></h3><p>用l,r1,r2三个变量维护.</p><p>r1是大于等于l+c,r2是大于l+c</p><p>当l++,此时r1,r2不能–,因为l指向的数变大了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span> (a[i]+c&gt;a[r1]) r1++;<br><span class="hljs-keyword">while</span> (a[i]+c&gt;=a[r2]) r2++;<br></code></pre></td></tr></table></figure><h3 id="4-区间"><a href="#4-区间" class="headerlink" title="4.区间"></a>4.<a href="https://www.luogu.com.cn/problem/P1712">区间</a></h3><p>暴力思路：将所有区间按长度排序,再枚举选取的起点,后一直添加新区间,直到有一个点被覆盖m次.</p><p>答案就是min{len(终点)-len(起点)}.</p><p>选取起始点和终点可用尺取优化,覆盖m次用线段树优化.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> last = <span class="hljs-number">1</span>, ass = INF;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, it[i].l, it[i].r, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (t[<span class="hljs-number">1</span>].maxn &gt;= m) &#123;<br>      <span class="hljs-keyword">while</span> (t[<span class="hljs-number">1</span>].maxn &gt;= m) &#123;<br>        ass = <span class="hljs-built_in">min</span>(ass, it[i].len - it[last].len);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, it[last].l, it[last].r, <span class="hljs-number">-1</span>);<br>        last++;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>没有小结</p>]]></content>
    
    
    <categories>
      
      <category>OI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>尺取法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AboutThisBlog</title>
    <link href="/2021/11/14/AboutThisBlog/"/>
    <url>/2021/11/14/AboutThisBlog/</url>
    
    <content type="html"><![CDATA[<p>This is a test passage.</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
